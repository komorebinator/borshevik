name: Build Custom Images

on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
      - stable
    paths-ignore:
      - '**/README.md'
  schedule:
    - cron: '05 10 * * *'
  workflow_dispatch:

env:
  BUILD_TAGS: "latest stable"
  IMAGE_DESC: "My Customized Universal Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_and_push:
    name: Build and push both images
    runs-on: ubuntu-24.04
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        include:
          - variant: borshevik
            target: borshevik
          - variant: borshevik-nvidia
            target: borshevik-nvidia

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Build ${{ matrix.variant }} image
        id: build
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Containerfile
          extra-args: |
            --target ${{ matrix.target }}
          image: ${{ matrix.variant }}
          tags: ${{ env.BUILD_TAGS }}
          labels: |
            org.opencontainers.image.title=${{ matrix.variant }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/Containerfile
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.keywords=bootc,ublue,universal-blue
            containers.bootc=1

      - name: Login to GHCR
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable')
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize registry name
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Normalize image name
        id: image_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ matrix.variant }}

      - name: Push image
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable')
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          registry: ${{ steps.registry_case.outputs.lowercase }}
          image: ${{ steps.build.outputs.image }}       # exact image just built
          tags: ${{ env.BUILD_TAGS }}                   # "latest stable"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable')
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

      - name: Sign image
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stable')
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
          for tag in $BUILD_TAGS; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY "$IMAGE_FULL:$tag"
          done
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          COSIGN_EXPERIMENTAL: false
